# -*- coding: utf-8 -*-
"""Untitled6 (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h_pv8iPOQwjIYAGicRZAf_8SxPPkc0Jz
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install pydicom

import numpy as np
import pandas as pd
import os

directory = '/content/drive/MyDrive/working/'
dir_train = '/content/drive/MyDrive/working/train_files/'

train_images = os.listdir(dir_train)
pivoted_train_df=pd.read_csv('/content/drive/MyDrive/working/train.csv')
pivoted_train_df.head()

train_df = pd.melt(
    pivoted_train_df,
    id_vars='Image',
    var_name='Hemorrhage',
    value_name='Label'
)
train_df.columns = ['Image_ID', 'Hemorrhage', 'Label']
train_df = train_df.reset_index(drop=True)
train_df.head()

print(f"the no of files:{len(train_images)}")

yes=train_df[train_df['Label']==1]
no=train_df[train_df['Label']==0]
print(f"the no of yes:{len(yes)}")
print(f"the no of no:{len(no)}")

train_df['Hemorrhage'].unique()

import matplotlib.pyplot as plt

plt.pie(train_df['Hemorrhage'].value_counts(), labels=train_df['Hemorrhage'].unique(), autopct='%1.1f%%')
plt.show()

!pip install pydicom

import pydicom

image=pydicom.dcmread(dir_train+train_images[0])
image

plt.imshow(image.pixel_array,cmap='gray')

train_df.head()

train_df['Hemorrhage'].unique()

epidural_df=train_df[(train_df['Hemorrhage']=='epidural') &( train_df['Label']==1)]
epidural_df.head()

len(epidural_df)

intraventricular_df=train_df[(train_df['Hemorrhage']=='intraventricular') &( train_df['Label']==1)]
intraventricular_df.head()

len(intraventricular_df)

intraparenchymal_df=train_df[(train_df['Hemorrhage']=='intraparenchymal') &( train_df['Label']==1)]
intraparenchymal_df.head()

len(intraparenchymal_df)

subarachnoid_df=train_df[(train_df['Hemorrhage']=='subarachnoid') &( train_df['Label']==1)]
subarachnoid_df.head()

len(subarachnoid_df)

subdural_df=train_df[(train_df['Hemorrhage']=='subdural') &( train_df['Label']==1)]
subdural_df.head()

len(subdural_df)

import seaborn as sns
sns.countplot(data=subdural_df,x='Hemorrhage')
sns.countplot(data=epidural_df,x='Hemorrhage')
sns.countplot(data=intraparenchymal_df,x='Hemorrhage')
sns.countplot(data=intraventricular_df,x='Hemorrhage')
sns.countplot(data=subarachnoid_df,x='Hemorrhage')

def display_image(train_df,hem):
  img=train_df[(train_df['Hemorrhage']==hem) & (train_df['Label']==1)]['Image_ID'].head(5).iloc[0]+".dcm"
  path=dir_train+img
  newimg=pydicom.dcmread(path)
  plt.imshow(newimg.pixel_array,cmap='gray')
  plt.title(hem)
  plt.show()

for i in train_df['Hemorrhage'].unique():
  display_image(train_df,i)

import pydicom
import cv2
import os
import matplotlib.pyplot as plt
from tqdm import tqdm

def get_parameter_values(img):
  parameters={
      "window_width":img.WindowWidth,
      "window_center": img.WindowCenter,

      "intercept":img.RescaleIntercept,

      "slope":img.RescaleSlope
  }

  return{i:get_first_value(j) for i,j in parameters.items()}

def get_first_value(v):

    if isinstance(v, pydicom.multival.MultiValue):
        return int(v[0])
    else:
      return int(v)

def windowing(imgs, window_center, window_width, intercept=0, slope=1):
    img=imgs.pixel_array
    img = img * slope + intercept
    min = window_center - window_width // 2
    max = window_center + window_width // 2
    img[img < min] = min
    img[img > max] = max
    return img

def sigmoid_windowing(dicom_image,width,center,U=1.0,eps=(1.0 / 255.0)):
  img = dicom_image.pixel_array
  param_values = get_parameter_values(dicom_image)
  slope=param_values['slope']
  intercept=param_values['intercept']
  img = img * slope + intercept
  ue = np.log((U / eps) - 1.0)
  W = (2 / width) * ue
  b = ((-2 * center) / width) * ue
  z = W * img + b
  img = U / (1 + np.exp(-z))
  img = (img - np.min(img)) / (np.max(img) - np.min(img))
  return img

def sigmoid_window_bsb(dcm, window_center, window_width):
    img = dcm.pixel_array * dcm.RescaleSlope + dcm.RescaleIntercept

    z = (img - window_center) / window_width

    z = np.clip(z, -15, 15)

    U = 255
    img = U / (1 + np.exp(-z))
    return img.astype(np.uint8)

def sigmoid_bsb_window(dcm):
    brain_img = sigmoid_window_bsb(dcm, 40, 80)
    subdural_img = sigmoid_window_bsb(dcm, 80, 200)
    bone_img = sigmoid_window_bsb(dcm, 600, 2000)

    bsb_img = np.zeros((brain_img.shape[0], brain_img.shape[1], 3))
    bsb_img[:, :, 0] = brain_img
    bsb_img[:, :, 1] = subdural_img
    bsb_img[:, :, 2] = bone_img
    return bsb_img

def normalize_data(img):
  min=np.min(img)
  max=np.max(img)
  img=(img-min)/(max-min)
  return img

def resize_data(image, width, height):
    return cv2.resize(image, (width, height))

SAVE_DIR='/content/drive/MyDrive/preprocessed_images/'

def save_image(directory, filename, img):
    if not os.path.exists(directory):
        os.makedirs(directory)

    save_path = os.path.join(directory, filename + '.png')

    img_to_save = (img * 255).astype(np.uint8)


    cv2.imwrite(save_path, img_to_save)

def preprocessing_pipeline(imgs,width,height ,type_of_windowing='Sigmoid'):
  dcm_images = pydicom.dcmread(os.path.join(dir_train, imgs + ".dcm"))


  if(type_of_windowing=='Sigmoid'):
    params=get_parameter_values(dcm_images)
    img=sigmoid_windowing(dcm_images,params['window_width'],params['window_center'])
    img=np.repeat(img[:, :, np.newaxis], 3, axis=2)
  elif(type_of_windowing=='Window'):
    params=get_parameter_values(dcm_images)
    img=windowing(dcm_images,params['window_width'],params['window_center'])
  elif (type_of_windowing == "Sigmoid_BSB"):
    img = sigmoid_bsb_window(dcm_images)

  normalized_img=normalize_data(img)


  resized_img=resize_data(normalized_img,width,height)


  print(f"Preprocessed image dimensions (Height, Width, Channels): {resized_img.shape}")

  plt.subplot(1, 2, 1)
  plt.imshow(dcm_images.pixel_array, cmap='bone')
  plt.title('Original  Image')

  plt.subplot(1, 2, 2)
  plt.imshow(resized_img, cmap='bone')
  plt.title('Preprocessed Image')

  plt.show()
  save_image(SAVE_DIR, imgs, resized_img)

def process_entire_dataset(dataset, width=224, height=224, type_of_windowing="Sigmoid"):
    for i in tqdm(dataset['Image']):
        preprocessing_pipeline(i, width, height, type_of_windowing)

def view_images(data,type_of_hemorrhage):
  no_of_images=5
  height=1
  fig,axis=plt.subplots(height,no_of_images,figsize=(20,5))
  list_hem = data[(data['Label'] == 1) & (data['Hemorrhage'] == type_of_hemorrhage)][['Image_ID']].head(no_of_images*height).reset_index()
  for i in range(no_of_images*height):
    image=pydicom.dcmread(dir_train+list_hem['Image_ID'][i]+".dcm")
    windowed_image=windowing(image,**get_parameter_values(image))
    axis[i].imshow(windowed_image, cmap=plt.cm.bone)
    axis[i].set_title(list_hem['Image_ID'][i])
  plt.suptitle("Images with " + type_of_hemorrhage, fontsize=20)
  plt.show()

for i in train_df['Hemorrhage'].unique():
    view_images(train_df,i)

process_entire_dataset(pivoted_train_df, width=224, height=224, type_of_windowing="Sigmoid")

file_list = os.listdir('/content/drive/MyDrive/preprocessed_images')
file_count = len([f for f in file_list if os.path.isfile(os.path.join('/content/drive/MyDrive/preprocessed_images', f))])

print(f'Number of files in the folder: {file_count}')